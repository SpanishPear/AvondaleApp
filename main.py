#!/usr/bin/env pythonfrom kivy.app import App #This imports the App and makes it availablefrom kivy.uix.floatlayout import FloatLayout #This imports the BoxLayout and makes it availablefrom kivy.properties import StringProperty #This imports the StringProperty and makes it availablefrom kivy.uix.screenmanager import ScreenManager, Screen, NoTransition #imports the screen and screenmanager classesfrom kivy.core.window import Window #import Window allows me to change background colour in line 35from kivy.lang import Builder    #Imports builder, allowws me to set the root_widget as builder.load_file(Avondale.kv)from kivy.uix.behaviors import ButtonBehavior #imports the button behaviours to be used for the ImageButton from kivy.uix.image import Image #imports the image class so that the behaviours of images and the settable properties (eg source) can be used in the ImageButton widgetfrom kivy.uix.button import Button #imports the image class so that the behaviours of images and the settable properties (eg source) can be used in the ImageButton widgetimport csv    #imports the csv module for data processing of csv filesfrom kivy.uix.gridlayout import GridLayout  #imports the Gridlayout optionfrom kivy.animation import Animationfrom kivy.graphics import *from kivy.uix.label import Label #imports the label widget so that i can dynamically create labels python sidefrom kivy.clock import Clockfrom kivy.uix.popup import Popupfrom kivy.uix.widget import Widgetfrom kivy.core.text import Label as CoreLabelfrom kivy.uix.boxlayout import BoxLayoutfrom kivy.core.window import WindowWindow.size = (800,600)Builder.load_string(''' #Have to load the kv for the popup seperatly to the screen manager, because the two are for somem reason not compatible#creates default behaviour for label, makes it wrap text<HelpPopup>:	title: "HELP"	title_size: 20	title_align: 'center'	size_hint: .6,.6	GridLayout:		cols: 2		spacing: root.width/10, root.height/12		padding: root.width/12,root.width/16		Image:			source: 'Assets/AvondaleLogoIcon.jpg'			size: root.width/6,root.height/4		Label:			text: 'This is the back button. Press it to go back to the previous screen '			size_hint_y: None			text_size: self.width, None			height: self.texture_size[1]			font_size: self.width/10		Image:			source: "Assets/WeekA_Icon.jpg"			size_hint: 0.1,1		Label:			text: "Press this button in the timetable screen to change between week A and week B"			size_hint_y: None			text_size: self.width, None			height: self.texture_size[1]			font_size: self.width/10			''')#DEFINING FONTSMY_FONTS = [	{		"name": "font",#names the font font		"fn_normal":"/Assets/Serenity.ttf",#sets the font to Serenity	}]#GLOBAL VARABLESstudentNumber = "" #sets the defauilt student numbercolour = (1,1,1,1)#sets the default colourtext = ''#sets the  default textstudentRow = ['test']#sets the defauilt student row#SETTING BACKGROUND COLOUR TO WHITEWindow.clearcolor = (1, 1, 1, 1)#Dictionariesweekdays = {1:'MONDAY', 2:'TUESDAY', 3:'WEDNSDAY', 4:'THURSDAY', 5:'FRIDAY'} #used to get weekdayperiodTimes = {1:'8:54am-9:46am', 2: '9:48am-10:40am', 3:'10:52am-11:54am', 4: "11:57am-12:48pm", 5: "1:34pm-2:26pm", 6:"2:28pm-3:20pm" } #used to get period timesweekImage = {"A": "Assets/WeekA_Icon.jpg", "B":"Assets/WeekB_Icon.jpg"}#used to get icon for wek A or week B#==============================POPUPS=======================class HelpPopup(Popup):	pass#========================CUSTOM WIDGETS====================#creates a new widget called ImageButton which has the properties of both Image and Button.#This makes it so i can specify an image which can have an on_press property too. Much neater than making a button with an image as a background#--------------- CUSTOM WIDGETS ----------class ImageButton(ButtonBehavior, Image): 	passclass RCL(Label): #RCL stands for resizable colour label. This label WILL RESZIE and have a coloured background	def on_size(self, *args):		self.canvas.before.clear() #clears any previous cavas instructions 		with self.canvas.before:#draws it before the widget, this way it is under the text.			Color(0, 0.2, 0.4,1) #sets the backgroiund colour to blue			Rectangle(pos=self.pos, size=self.size) #draws a blue rectangle behind the text, this identifies is at a heading in the tableclass CornerRectangleWidget(Label):	def __init__(s, **kwargs):		global colour #imports the global variable colours		global text #imports the global variable text		s.text = text #sets the text of each cell to be the global variable text, which should contain a subject		s.halign = 'left' #sets the text align to left so the text doesnt go missing		s.color = (0,0,0,1) #sets the text color to black		s.c = colour #sets the background colour to the global variable colour, which should change to contain the colour value for that subject line		super(CornerRectangleWidget, s).__init__() #initiates the widget#========================================================================#========================================================================#==============================SCREENS===================================#========================================================================#========================================================================#=============LOGIN SCREEN============class LoginScreen(Screen): 	def Login(self, studentNum, studentData):		global studentNumber  #imports student number, at this point it contains nothing, but this function is the one that setst the value of studentNumber to the number entered IF IT IS VALID		global studentRow   #imports studentRow, at this point it contains nothing, but this function is the one that sets the value of studentRow to the row of the studdent whose student number was entered		with open(studentData, newline='') as f:			valid = False			for row in csv.DictReader(f):				if row['StudentNum'] == studentNum:					studentRow = row #sets student Row to the row with the details of the student based on their student number					studentNumber = studentNum #sets the global variable StudentNumber to the student number entered					valid = True #sets valid to true, user can now login					break#breaks the loop if the number is found		if valid == False:			self.ids.Warning.text = "Please enter a valid student Number"			anim  = Animation(color=(1,0,0,0), duration=0.01) + Animation(color=(1,0,0,0), duration=0.3) #flashes red 			anim += Animation(color=(1,0,0,1), duration=0.1) + Animation(color=(1,0,0,1), duration=1)#flashes red			anim.repeat = False #makes it so it doesnt continually flash and hurt someones eyes-- User suggestion			anim.start(self.ids.Warning) #starts the animation		else:			self.parent.current = str('home')#changes to the home screen#===============HOME SCREEN=============class HomeScreen(Screen): #HOME SCREEN	def openHelpPopup(self, *args): #This fucntion will open the Help popup when called		HelpPopup().open()	def on_enter(self):		global studentRow #imports global student Row		self.ids.Name.text = str(' '.join(studentRow["Name"].split('_')))class TimetableScreen(Screen): #TIMETABLE SCREEN		def getColours(self,colours, studentData, subject): #get colours function which gets the colours for each line		global studentNumber#imports global student Number		global studentRow#imports global student Row		with open(colours) as e:			for line in csv.DictReader(e): #list of colours with lines				pass				invertedStudentRow = dict([[v,k] for k,v in studentRow.items()]) #inverts the list so i can get a colour by searching for a subject		return line[invertedStudentRow[subject]] #returns the colour from the line given by the subject		#subject:line:colour		 #---------------MAKES THE TIMETABLE FROM CSV FILES-----------------	def MakeTimetable(self, lines, blankTimetable, studentData, day , period): #define function & paramaters		global studentNumber #imports global student Number		global studentRow #imports global student Row		with open(lines) as e: #opens the lines document as "e"			for line in csv.reader(e):				subjects = line #saves all the lines in an array called subjects		studentTimetable = []	#sets studentTimetable to an empty list so that the replaced timetable can be appended to it		with open(blankTimetable, newline = '') as g:			for row1 in csv.reader(g):				studentTimetableUnreplaced = ' '.join(row1) #turns the timetable into a sring so that the replace function can be used.				for i in range(len(subjects)):					studentTimetableUnreplaced = (studentTimetableUnreplaced.replace(subjects[i], studentRow[subjects[i]])) #replaces the lines/subjects in blankTimetable 				studentTimetable.append(studentTimetableUnreplaced) #appends each row to the studentTimetable			for i in range(len(studentTimetable)):		#splits the timetable into subject by subject, rather than a string of all the subjects. 				studentTimetable[i]= studentTimetable[i].split()	#Example, changes 'maths science english chemistry sdd free' 																	#to ['maths', 'science', 'english', 'chemistry', 'sdd', 'free']		return (studentTimetable[day-1][period])#returns a subject based off the parameters day and period	#--------------DRAWS TIMETABLE FROM MAKE TIMETABLE FUNCTION AND CHANGES BASED ON WEEK A OR B-------------	def drawTimetable(self, week):		global colour #imports global colour variable		global text #imports global text variable√ü		self.ids.grid.clear_widgets()#Deletes all widgets from the grid		#creates the top left cells		gridLvl2 = GridLayout(cols = 2, id = "lvl2") #creates a grid layout with 2 columns				#TOP LEFT CELL		gridLvl3 = GridLayout(rows = 2, padding_y = 0) #creates another grid layotu with 2 rows		#LEFT HALF OF TOP LEFT CELL		label = Label(text = "Home", color = (0,0,0,1),size_hint_y = 1, size_hint_x = 1, pos_hint_y =1, pos_hint_x= 1) #creates a label with text 'home'		homeButton = ImageButton(source = "Assets/AvondaleLogoIcon.jpg",size_hint_y = 1, size_hint_x = 1, pos_hint_y =1, pos_hint_x= 1)#creates an image button with the picture of the school logo		gridLvl3.add_widget(label) #adds the label  to the gridlayout on the left of the cell with 2 rows		gridLvl3.add_widget(homeButton) #adds the button to the gridlayout on the left of the cell with two rows		homeButton.bind(on_press =lambda x:self.switchScreen('home')) #binds the switchScreen function to the button, makes it so that when clicked it goes to the home screen. Lambda is used to not cause errors		gridLvl2.add_widget(gridLvl3)	#adds the whole gridlayotu 3(2 rows, label on top, button on bottom), to the outside gridlayout(gridlvl2)		#RIGHT HALF OF TOP LEFT CELL --- CHANGE WEEK BUTTON		button = ImageButton(source = weekImage[week], id = "timetableImage", size_hint_x = 1, size_hint_y = 1) #creates the timteable week button		gridLvl2.add_widget(button) #adds button to grid		button.bind(on_press= self.sourceSwitch) #when the buton is pressed, it changes the source of the image, and redraws the table with different data		self.ids.grid.add_widget(gridLvl2) #addds antoher grid to original grid				#WEEKDAY HEADERS		for i in range(1,6): #1-2-3-4-5			label = RCL(text = weekdays[i], color = (1,1,1,1), font_size = (Window.width/30)) #creates a label with text of the weekday eg "MONDAY" and text colour white. Uses the RCL widget which has the blue background colour, the same blue as the school logo			self.ids.grid.add_widget(label) #adds the label to the grid		#draws the timetable with data from Week 		for row in range(6): #loops through 6 times for 6 periods			for cell in range(6): #loops through 6 times for 5 days + 1 column for the period numbers , 5+1 = 6				if cell == 0: #SHADES THE FIRST COLUMN					label = RCL( text = "PERIOD" + " " + str(row+1)+ "\n"+ periodTimes[(row+1)])#sets the text to PERIOD + the period Number + the period times 																								 #based of what row thetimetable is in					self.ids.grid.add_widget(label)#adds cell to grid				else: 					if week == "A": #draws the timetable with data from week A						colour = (self.getColours("SubjectColours.csv", "studentData.csv",(self.MakeTimetable("Lines.csv", "timetable.csv","studentData.csv", cell,row+1)))) #sets the colour variable using the getColours function and the makeTimetable function as the subject						colour = tuple([float(x) for x in colour.split(',')])						text = self.MakeTimetable("Lines.csv", "timetable.csv","studentData.csv", (cell),(row+1))						label = CornerRectangleWidget(text = text, halign = "left", valign = "middle", color = (1,1,1,1))#makeslabel with the text of what subject it is						self.ids.grid.add_widget(label) #adds cell to grid					else:  #Draws the timetable with data from week B						colour = (self.getColours("SubjectColours.csv", "studentData.csv",(self.MakeTimetable("Lines.csv", "timetable.csv","studentData.csv", 5+cell,row+1)))) #sets the colour variable using the getColours function and the makeTimetable function as the subject								colour = tuple([float(x) for x in colour.split(',')])						text = self.MakeTimetable("Lines.csv", "timetable.csv","studentData.csv", (5+cell),(row+1))						label = CornerRectangleWidget(halign = "left", valign = "middle", color = (1,1,1,1))  #makeslabel with the text of what subject it is						self.ids.grid.add_widget(label) #adds cell to grid	def on_enter(self):		self.drawTimetable('A')	#-----------__SWITCHES THE SOURCE OF THE ICON wee	def sourceSwitch(self, instance):		if instance.source == "Assets/WeekA_Icon.jpg":			week = 'B'#if week is a, swap to B, and drwa the timetable with week B			instance.source = "Assets/WeekB_Icon.jpg" #changes the icon from WEEK A to WEEK B			self.drawTimetable(week) #calls the drawtimetable function		elif instance.source == "Assets/WeekB_Icon.jpg":			instance.source = "Assets/WeekA_Icon.jpg" #CHANGES the ICON from WEEK B to WEEK A			week = 'A'#if week is B, swap to A, and draw the timetbale with week A			self.drawTimetable(week)	def switchScreen(self, screen):		self.parent.current = str(screen)#switches screens to whatever the value of the parameter isclass MyScreenManager(ScreenManager): #SCREENMANAGER 	passroot_widget = Builder.load_file("Avondale.kv")#loads the KV file as the root widgetclass Avondale(App): #This defines the App and calls in the kv file of the same name	def build(self): #This builds the widget		self.icon = "Assets/AvondaleLogoIcon.jpg"		return root_widget #This returns the kivy file to the screen. WIll make sure that the screenmanager is the root widget if __name__ == '__main__':	Avondale().run() #This runs the App called Avondale